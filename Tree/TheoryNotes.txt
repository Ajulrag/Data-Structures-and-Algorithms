TREE
--------------------
=> It is a hierarchical data structure that consist of nodes connected by edges(Typically a node stores data value). 

=> It is a non-linear data structure.

=> In linear data structure, the time required to search is propotional to the size of the data structure.

=> Tree however, owing to the non-linear nature allow quicker and easier access to the data.

=> A tree will not contain any loops or cycles.



USAGES:
    * File system of directory structure.
    * A family tree.
    * An organisation tree.
    * DOM
    * Chat bots

TYPES OF TREES:-
---------------
    1. Binary tree  - root node contains 2 childnodes
    2. Ternary tree - root node contains 3 childnodes
    3. K-ary tree   - root node contains n childnodes

*Based on the configuration of nodes there are also several classification.Some of are:

    => Complete Binary Tree - All the levels are filled except may be for the last level elements are filled as left as possible.

    => Perfect Binary Tree  - It has all the levels filled.

    => Full Tree            - If the base has two child, remaining parent must wants to contain two child.

    => Binary Search Tree   - The smaller node is put to the left of a node and a higher value node is put to the right of a node.

    => Ternary Search Tree  - It is similier to a binary search tree, except for the fact that here one element can have at most 3 childeren.



BINARY SEARCH TREE
------------------

Traversal on BST:-
------------------
=> Visiting every node in the tree

=> A hierarchical data structure like a tree can be traversed in different ways:
    
    1.Depth First Search (DFS):-
     ---------------------------
        -> The DFS algorithm starts at the root node and explores as far as possible along each branch before backtracking.
        
        -> Visit the root node, visit all the nodes in the left subtree and visit all the nodes in the right subtree.

        -> Depending on the order in which we do this, there can be three types of BFS traversals:

            1. Preorder - (root,left,right)
            
            2. Inorder  - (left,root,right) 

            3. Postorder- (left,right,root)

    2.Breadth First Search(BFS):-
     ----------------------------
        -> Explore all nodes at the present depth prior to moving on to the nodes at the next depth level.

        BFS Traversal approch:-

            1. Create a queue
            2. Enqueue the root node 
            3. As long as a node exist in the queue,
                a. Dequeue the node from the fromt 
                b. Read the nodes value 
                c. Enqueue the nodes left child if it exists
                d. Enqueue the nodes right child if it exists



Application of tree:-
-------------------
    o Spanning tree : Shortest path routes to direct the packets to the destination.

    o Binary search tree : Maintain sorted stream of data.

    o Heap : Tree data structure helps to represent the data in the form of array to implement priority queue.

    o AI : Decision trees and other tree-based models are commonly used in machine learning and artificial intelligence to make predictions and classify data.
    
    o Database : Some databases use trees to organize data for efficient searching and sorting.