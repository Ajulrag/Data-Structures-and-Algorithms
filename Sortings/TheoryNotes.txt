SORTING
-----------------
=> The arrangement of data in a preferred order.

=> By sorting data, it is easier to search through it quickly and easily.

=> The simplest example of sorting is a dictionary.



Bubble Sort
------------------
=> Bubble sort is a simple sorting algorithm.

=> This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.

=> This algorithm is not suitable for large data sets.

=> Its average and worst case complexity are of Ο(n2) where n is the number of items.



Insertion Sort
-------------------
=> Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands.

=> The array is virtually split into a sorted and an unsorted part.

=> Values from the unsorted part are picked and placed at the correct position in the sorted part.



Merge Sort
-------------------
=> Merge sort is a sorting technique based on divide and conquer technique.

=> With worst-case time complexity being Ο(n log n), it is one of the most respected algorithms.

=> Merge sort first divides the array into equal halves and then combines them in a sorted manner.



Quick Sort
-------------------
=> Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays.

=> A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value.

=> Quicksort partitions an array and then calls itself recursively twice to sort the two resulting subarrays.

=> This algorithm is quite efficient for large-sized data sets as its average and worst-case complexity are O(n2), respectively.



Selection Sort
------------------
=> This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end.

=> Initially, the sorted part is empty and the unsorted part is the entire list.

=> The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array.

=> This process continues moving unsorted array boundary by one element to the right.

=> This algorithm is not suitable for large data sets as its average and worst case complexities are of Ο(n2), where n is the number of items.

